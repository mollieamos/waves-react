{"ast":null,"code":"var _jsxFileName = \"/Users/mollieamos/Documents/Coding/Dev Ed/waves/waves/src/components/librarySong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying\n}) => {\n  const songSelectHandler = () => {\n    audioRef.current.play(); // Check if the song is playing\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: \"library-songs\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: song.name,\n      src: song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/Users/mollieamos/Documents/Coding/Dev Ed/waves/waves/src/components/librarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","songSelectHandler","current","play","playPromise","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,KAFmB;AAGnBC,EAAAA,cAHmB;AAInBC,EAAAA,EAJmB;AAKnBC,EAAAA,QALmB;AAMnBC,EAAAA;AANmB,CAAD,KAOd;AACJ,QAAMC,iBAAiB,GAAG,MAAM;AAC9BF,IAAAA,QAAQ,CAACG,OAAT,CAAiBC,IAAjB,GAD8B,CAE9B;;AACA,QAAIH,SAAJ,EAAe;AACb,YAAMI,WAAW,GAAGL,QAAQ,CAACG,OAAT,CAAiBC,IAAjB,EAApB;AACD;AACF,GAND;;AAOA,sBACE;AAAK,IAAA,OAAO,EAAEF,iBAAd;AAAiC,IAAA,SAAS,EAAC,eAA3C;AAAA,4BACE;AAAK,MAAA,GAAG,EAAEN,IAAI,CAACU,IAAf;AAAqB,MAAA,GAAG,EAAEV,IAAI,CAACW;AAA/B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,kBAAKX,IAAI,CAACU;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKV,IAAI,CAACY;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAxBD;;KAAMb,W;AA0BN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n}) => {\n  const songSelectHandler = () => {\n    audioRef.current.play();\n    // Check if the song is playing\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n    }\n  };\n  return (\n    <div onClick={songSelectHandler} className=\"library-songs\">\n      <img alt={song.name} src={song.cover}></img>\n      <div className=\"song-description\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}