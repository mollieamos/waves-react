{"ast":null,"code":"var _jsxFileName = \"/Users/mollieamos/Documents/Coding/Dev Ed/waves/waves/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; // Import styles\n\nimport \"./styles/app.scss\"; // Adding components\n\nimport Player from \"./components/player\";\nimport Song from \"./components/song\";\nimport Library from \"./components/library\";\nimport Nav from \"./components/nav\"; // Import data\n\nimport data from \"./components/data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Ref\n  const audioRef = useRef(null); // State\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duraction: 0,\n    animationPercentage: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; // Calculate percentage\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(current);\n    const animationPercentage = Math.round(roundedCurrent / roundedDuration * 100);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: percentage\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      isPlaying: isPlaying,\n      currentSong: currentSong,\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      songs: songs,\n      setSongs: setSongs,\n      setCurrentSong: setCurrentSong,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      setSongs: setSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      isPlaying: isPlaying,\n      setSongs: setSongs,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FP5GR7rj6nBA2rnHf3ccVmtuOao=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mollieamos/Documents/Coding/Dev Ed/waves/waves/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","Nav","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duraction","animationPercentage","libraryStatus","setLibraryStatus","timeUpdateHandler","e","current","target","duration","roundedCurrent","Math","round","roundedDuration","percentage","audio"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC,C,CAEA;;AAEA,OAAO,mBAAP,C,CACA;;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,kBAAhB,C,CAEA;;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAD,CAAvB,CAFa,CAGb;;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACM,IAAI,EAAL,CAAlC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAN,CAA9C;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC;AACvCiB,IAAAA,WAAW,EAAE,CAD0B;AAEvCC,IAAAA,SAAS,EAAE,CAF4B;AAGvCC,IAAAA,mBAAmB,EAAE;AAHkB,GAAD,CAAxC;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCrB,QAAQ,CAAC,KAAD,CAAlD;;AACA,QAAMsB,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASR,WAAzB;AACA,UAAMS,QAAQ,GAAGH,CAAC,CAACE,MAAF,CAASC,QAA1B,CAF+B,CAG/B;;AACA,UAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAvB;AACA,UAAMM,eAAe,GAAGF,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAxB;AACA,UAAML,mBAAmB,GAAGS,IAAI,CAACC,KAAL,CACzBF,cAAc,GAAGG,eAAlB,GAAqC,GADX,CAA5B;AAGAd,IAAAA,WAAW,CAAC,EACV,GAAGD,QADO;AAEVE,MAAAA,WAAW,EAAEO,OAFH;AAGVE,MAAAA,QAHU;AAIVP,MAAAA,mBAAmB,EAAEY;AAJX,KAAD,CAAX;AAMD,GAfD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,aAAa,EAAEX,aAApB;AAAmC,MAAA,gBAAgB,EAAEC;AAArD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEV;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AACE,MAAA,QAAQ,EAAEH,QADZ;AAEE,MAAA,YAAY,EAAEM,YAFhB;AAGE,MAAA,SAAS,EAAED,SAHb;AAIE,MAAA,WAAW,EAAEF,WAJf;AAKE,MAAA,WAAW,EAAEK,WALf;AAME,MAAA,QAAQ,EAAED,QANZ;AAOE,MAAA,KAAK,EAAEN,KAPT;AAQE,MAAA,QAAQ,EAAEC,QARZ;AASE,MAAA,cAAc,EAAEE,cATlB;AAUE,MAAA,KAAK,EAAEH,KAVT;AAWE,MAAA,cAAc,EAAEG,cAXlB;AAYE,MAAA,QAAQ,EAAEF;AAZZ;AAAA;AAAA;AAAA;AAAA,YAHF,eAiBE,QAAC,OAAD;AACE,MAAA,QAAQ,EAAEF,QADZ;AAEE,MAAA,KAAK,EAAEC,KAFT;AAGE,MAAA,cAAc,EAAEG,cAHlB;AAIE,MAAA,SAAS,EAAEC,SAJb;AAKE,MAAA,QAAQ,EAAEH,QALZ;AAME,MAAA,aAAa,EAAEU;AANjB;AAAA;AAAA;AAAA;AAAA,YAjBF,eAyBE;AACE,MAAA,YAAY,EAAEE,iBADhB;AAEE,MAAA,gBAAgB,EAAEA,iBAFpB;AAGE,MAAA,GAAG,EAAEd,QAHP;AAIE,MAAA,GAAG,EAAEG,WAAW,CAACqB;AAJnB;AAAA;AAAA;AAAA;AAAA,YAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;GA/DQzB,G;;KAAAA,G;AAiET,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\n\n// Import styles\n\nimport \"./styles/app.scss\";\n// Adding components\n\nimport Player from \"./components/player\";\nimport Song from \"./components/song\";\nimport Library from \"./components/library\";\nimport Nav from \"./components/nav\";\n\n// Import data\n\nimport data from \"./components/data\";\n\nfunction App() {\n  // Ref\n  const audioRef = useRef(null);\n  // State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duraction: 0,\n    animationPercentage: 0,\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    // Calculate percentage\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(current);\n    const animationPercentage = Math.round(\n      (roundedCurrent / roundedDuration) * 100\n    );\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: percentage,\n    });\n  };\n  return (\n    <div className=\"App\">\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player\n        audioRef={audioRef}\n        setIsPlaying={setIsPlaying}\n        isPlaying={isPlaying}\n        currentSong={currentSong}\n        setSongInfo={setSongInfo}\n        songInfo={songInfo}\n        songs={songs}\n        setSongs={setSongs}\n        setCurrentSong={setCurrentSong}\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        setSongs={setSongs}\n      />\n      <Library\n        audioRef={audioRef}\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}